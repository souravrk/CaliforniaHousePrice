# -*- coding: utf-8 -*-
"""CaliforniaHousingPrices.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rStpyl2CRe7Q79AXu715xZYyyD4QL68a
"""

from google.colab import drive
drive.mount('/content/drive')

!unzip /content/drive/MyDrive/Keggle/HousePrice.zip

df = pd.read_csv('/content/housing.csv')

import pandas as pd

df

df['ocean_proximity'].value_counts()

df_shuffled = df.sample(n=len(df), random_state=1)
df_shuffled

pd.get_dummies(df_shuffled['ocean_proximity']).head()

df_shuffled.drop('ocean_proximity', axis=1).head()

df_final = pd.concat([df_shuffled.drop('ocean_proximity', axis=1),
                     pd.get_dummies(df_shuffled['ocean_proximity'])],axis=1)
df_final

df_final = df_final[['longitude',	'latitude',	
                                     'housing_median_age',	'total_rooms',	
                                     'total_bedrooms',	'population',	
                                     'households',	'median_income',	
                                     '<1H OCEAN',	
                                     'INLAND',	'ISLAND',	
                                     'NEAR BAY',	'NEAR OCEAN', 'median_house_value']]
df_final

df_final = df_final.dropna()
len(df_final)

train_df, test_df, val_df = df_final[:18000], df_final[18000:19217], df_final[19215:]
len(train_df), len(test_df), len(val_df)

X_train, y_train = train_df.to_numpy()[:, :-1], train_df.to_numpy()[:, -1]
X_val, y_val = val_df.to_numpy()[:, :-1], val_df.to_numpy()[:, -1]
X_test, y_test = test_df.to_numpy()[:, :-1], test_df.to_numpy()[:, -1]

X_train.shape, y_train.shape, X_val.shape, y_val.shape, X_test.shape, y_test.shape

from sklearn.preprocessing import StandardScaler
import numpy as np

scaler = StandardScaler().fit(X_train[:, :8])
def preprocessor(X):
  A = np.copy(X)
  A[:,:8] = scaler.transform(A[:, :8])
  return A

X_train_preprocessed, X_val_preprocessed, X_test_preprocessed = preprocessor(X_train), preprocessor(X_val), preprocessor(X_test)

X_train_preprocessed.shape, X_val_preprocessed.shape, X_test_preprocessed.shape

pd.DataFrame(X_train_preprocessed).head()

import pandas as pd

pd.DataFrame(X_train_preprocessed)[0].hist()

from sklearn.metrics import mean_squared_error as mse
from sklearn.linear_model import LinearRegression

lm = LinearRegression().fit(X_train, y_train)
mse(lm.predict(X_train), y_train, squared=False), mse(lm.predict(X_val), y_val, squared=False)

from sklearn.neighbors import KNeighborsRegressor

knn = KNeighborsRegressor(n_neighbors=10).fit(X_train, y_train)
mse(knn.predict(X_train), y_train, squared=False), mse(knn.predict(X_val), y_val, squared=False)

from sklearn.neighbors import KNeighborsClassifier

from sklearn.ensemble import RandomForestRegressor

rfr = RandomForestRegressor(max_depth=10).fit(X_train,y_train)
mse(rfr.predict(X_train), y_train, squared=False), mse(rfr.predict(X_val),y_val, squared=False)

from sklearn.ensemble import GradientBoostingRegressor

gbr = GradientBoostingRegressor(n_estimators=250).fit(X_train, y_train)
mse(gbr.predict(X_train), y_train, squared=False), mse(gbr.predict(X_val), y_val, squared=False)

from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import *
from tensorflow.keras.callbacks import ModelCheckpoint 
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam

simple_nn = Sequential()
simple_nn.add(InputLayer((13,)))
simple_nn.add(Dense(2, 'relu'))
simple_nn.add(Dense(1,'linear'))

opt=Adam(learning_rate=.1)
cp=ModelCheckpoint('models/simple_nn', save_best_only=True)
simple_nn.compile(optimizer=opt, loss='mse', metrics=[RootMeanSquaredError()])
simple_nn.fit(x=X_train, y=y_train, validation_data=(X_val,y_val), callbacks=[cp], epochs=100)

from tensorflow.keras.models import load_model
simple_nn = load_model('models/simple_nn')
mse(simple_nn.predict(X_train), y_train, squared=False), mse(simple_nn.predict(X_val), y_val, squared=False)

medium_nn = Sequential()
medium_nn.add(InputLayer((13,)))
medium_nn.add(Dense(32, 'relu'))
medium_nn.add(Dense(16, 'relu'))
medium_nn.add(Dense(1, 'linear'))

opt = Adam(learning_rate=.1)
cp = ModelCheckpoint('models/medium_nn', save_best_only=True)
medium_nn.compile(optimizer=opt, loss='mse', metrics=[RootMeanSquaredError()])
medium_nn.fit(x=X_train, y=y_train, validation_data=(X_val, y_val), callbacks=[cp], epochs=100)

medium_nn = load_model('models/medium_nn')
mse(medium_nn.predict(X_train), y_train, squared=False), mse(medium_nn.predict(X_val), y_val, squared=False)

large_nn = Sequential()
large_nn.add(InputLayer((13,)))
large_nn.add(Dense(256, 'relu'))
large_nn.add(Dense(128, 'relu'))
large_nn.add(Dense(64, 'relu'))
large_nn.add(Dense(32, 'relu'))
large_nn.add(Dense(1, 'linear'))

opt = Adam(learning_rate=.1)
cp = ModelCheckpoint('models/large_nn', save_best_only=True)
large_nn.compile(optimizer=opt, loss='mse', metrics=[RootMeanSquaredError()])
large_nn.fit(x=X_train, y=y_train, validation_data=(X_val, y_val), callbacks=[cp], epochs=100)

large_nn = load_model('models/large_nn')
mse(large_nn.predict(X_train), y_train, squared=False), mse(large_nn.predict(X_val), y_val, squared=False)

mse(gbr.predict(X_test), y_test, squared=False)

